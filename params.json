{"name":"Clojure Katas","tagline":"Learn the joy of Clojure by solving problems.","body":"## Current Dependency\r\n- Clojure 1.5.1\r\n- Leiningen 2.0.0-RC2\r\n\r\n# What\r\nSet of small problems from [Structure and Interpretation of Computer Programs](http://mitpress.mit.edu/sicp/)\r\nand [Project Euler](http://projecteuler.net/)\r\n\r\n# Why\r\nIf you're interested in learning Clojure and look for small problems to practice,\r\nhope this package can be of help!\r\n\r\n# How\r\nYou can use this package to:\r\n- Solve existing problems\r\n- Create new problems\r\n\r\n## Solve existing problems\r\n### Example: Solve sine angle\r\n-----------------------------\r\nRun katas:\r\n\r\n    $ lein katas-run\r\n\r\nWhen *arranged-prob* is not implemented under `/src/clojure_katas/sine_angle.clj`:\r\n\r\n    $ lein katas-run\r\n    Performing task 'run' with profile(s): 'test'\r\n    Current kata to tackle:  clojure-katas.sine-angle/sine\r\n    false\r\n\r\nAfter *arranged-porb* is implemented, it moves to the next problem:\r\n\r\n    Performing task 'run' with profile(s): 'test'\r\n\r\n    Testing clojure-katas.sine-angle-test\r\n\r\n    Ran 1 tests containing 2 assertions.\r\n    0 failures, 0 errors.\r\n    Current kata to tackle:  clojure-katas.arranged-prob/prob\r\n    false\r\n\r\n## Create new problems\r\n### Example: create arranged probability problem\r\n-------------------------------------------------\r\nCreate `/src-answers/clojure-katas/arranged-prob.clj` for solution.\r\n\r\n```clojure\r\n(defn prob\r\n  \"p: total population,\r\n   m: total number of sub-category,\r\n   n: number of consecutive draws\"\r\n  [p, m, n]\r\n  (if (>= 0 n) 1\r\n    (* (double (/ m p)) (prob (- p 1) (- m 1) (- n 1)))))\r\n```\r\nCreate `/src/clojure-katas/arranged-prob.clj` for problem challenge.\r\n**When using core/defproblem, documentation of the problem is required.**\r\n\r\n```clojure\r\n(ns clojure-katas.arranged-prob\r\n  (:require [clojure-katas.core :as core]))\r\n\r\n(core/defproblem prob\r\n \"required documentation goes here\"\r\n  [p, m, n])\r\n```\r\n\r\nCreates test under `/test/clojure-katas/arranged-prob-test`\r\n\r\n```clojure\r\n(deftest arranged-prob-test\r\n  (testing \"conditional probability\"\r\n    (is (= (float 0.12311558) (float (prob 200 100 3))))))\r\n```\r\n\r\nAdd `clojure-katas.arranged-prob-test` inside the problemsets defined in [test_runner](https://github.com/marshallshen/clojure-katas/blob/master/test/clojure_katas/test_runner.clj)\r\n\r\n```clojure\r\n(def problems\r\n  '[clojure-katas.sine-angle-test\r\n    clojure-katas.arranged-prob-test))\r\n```\r\n\r\nRun through solution to make sure it works:\r\n\r\n    $ lein katas-answers\r\n\r\n# Contributors\r\nMany thanks to [Gary Federicks](https://github.com/fredericksgary) and [Robert Boyd](https://github.com/rboyd) for helping out on the prooject!\r\n\r\n## Another great resources\r\n* [Clojure Koans](http://clojurekoans.com/)\r\n* [Project Euler](http://projecteuler.net/problems)\r\n* [4Clojure](http://www.4clojure.com/)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}