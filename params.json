{"name":"Clojure Katas","tagline":"Learn the joy of Clojure by solving problems.","body":"# Clojure Katas\r\n\r\nThis project contains a set of problems to help you get your hands dirty\r\nwith Clojure. I hope we can add more problems and treat this as a\r\n**living-and-breathing** project.\r\n\r\n## Get started\r\nThe project is set up so that you can solve problems one by one. All the\r\nproblem skeletons are set up [here](https://github.com/marshallshen/clojure-katas/tree/master/src/clojure_katas), which is the place you can put\r\nyour solutions.\r\n\r\nTo verify your answer, you can run:\r\n\r\n\r\n    $ lein katas-run\r\n\r\nWe also implemented solution manual, to run katas with their solutions;\r\n\r\n\r\n    $ lein katas-answers\r\n\r\n## Look for contributors\r\nWe want to keep this project ongoing, if you are interested in helping\r\nout, feel free to:\r\n\r\n  1. Open an issue (I will try to be as responsive as possible! :-)).\r\n  2. Submit a Pull Request (bugfix, or submit a new problem!)\r\n\r\nIf you have any questions, feel free to messaage me on Github or Twitter: @marshallshen\r\nMany thanks to [the contributors](https://github.com/marshallshen/clojure-katas/graphs/contributors), you made this project awesome!\r\n\r\n### Example: solve a kata\r\n-----------------------------\r\nSay *arranged-prob* is not implemented under `/src/clojure_katas/sine_angle.clj`:\r\n\r\n    $ lein katas-run\r\n    Performing task 'run' with profile(s): 'test'\r\n    Current kata to tackle:  clojure-katas.sine-angle/sine\r\n    false\r\n\r\nAfter *arranged-prob* is implemented, it moves to the next problem:\r\n\r\n    Performing task 'run' with profile(s): 'test'\r\n\r\n    Testing clojure-katas.sine-angle-test\r\n\r\n    Ran 1 tests containing 2 assertions.\r\n    0 failures, 0 errors.\r\n    Current kata to tackle:  clojure-katas.arranged-prob/prob\r\n    false\r\n\r\n### Example: create a new kata\r\n-------------------------------------------------\r\nCreate `/src-answers/clojure-katas/arranged_prob.clj` for solution.\r\n\r\n```clojure\r\n(defn prob\r\n  \"p: total population,\r\n   m: total number of sub-category,\r\n   n: number of consecutive draws\"\r\n  [p, m, n]\r\n  (if (>= 0 n) 1\r\n    (* (double (/ m p)) (prob (- p 1) (- m 1) (- n 1)))))\r\n```\r\nCreate `/src/clojure-katas/arranged_prob.clj` for problem challenge.\r\n\r\n** When using core/defproblem, doc is required. **\r\n\r\n```clojure\r\n(ns clojure-katas.arranged-prob\r\n  (:require [clojure-katas.core :as core]))\r\n\r\n(core/defproblem prob\r\n \"required documentation goes here\"\r\n  [p, m, n])\r\n```\r\n\r\nCreates test under `/test/clojure-katas/arranged_prob_test.clj`\r\n\r\n```clojure\r\n(deftest arranged-prob-test\r\n  (testing \"conditional probability\"\r\n    (is (= (float 0.12311558) (float (prob 200 100 3))))))\r\n```\r\n\r\nAdd *clojure-katas.arranged-prob-test* inside the problemsets defined in [test_runner](https://github.com/marshallshen/clojure-katas/blob/master/test/clojure_katas/test_runner.clj)\r\n\r\n```clojure\r\n(def problems\r\n  '[clojure-katas.sine-angle-test\r\n    clojure-katas.arranged-prob-test))\r\n```\r\n\r\nRun through solution to make sure it works:\r\n\r\n    $ lein katas-answers\r\n\r\n\r\n## Current Dependency\r\n- Clojure 1.5.1\r\n- Leiningen 2.4.1\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}